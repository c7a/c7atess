Purpose:
   Run Optical Character Recognition on millions of images,
   using multiple machines and saving the results in a DB for analysis and other uses.
   
   This project is also useful for individual images because the image preprocessing gets
   better results from Tesseract.

   This project is also useful for CPU intensive tasks other than OCR that can be run in parallel on machines.

Interface
   A RESTful interface accepts client jobs. A job is specified by the directory path, and all images in the 
   tree are OCR'd. Currently, there is an email field for notification of results.  
   There is also a CLI for accepting a job.

   Jobs are queued for processing by the Scheduler.

   A web UI shows the job qeue. Maybe we will be able to re-order or cancel jobs. 

Engine
   The scheduler accepts a job from the queue, traverses the directory tree, and sends per-image tasks to
   the workers so as to keep them optimally busy. Image format is JPG, JP2, and Tiff.  Each worker pre-processes
   an image for adaptive thresholding,
   runs Tesseract, filters junk from the output, then saves the results to the OCR DB.
   The results include a .hocr file, raw text, and some statistics.

   The preprocessing is done in Graphicsmagick. It converts color to a greyscale.  It makes a copy of the image,
   applies blurring, then divides the two images pixel by pixel, giving a photocopy-like effect.
   If the source image had uneven lighting then that is lost.  If the print density varied, then that is mostly lost.
   After this preprocessing,  Tesseract can choose any threshold in a wide range; it is not critical.

   The filtering removes junk 'word's that are all punctuation, or blank.

   When all images are OCR'd, the job status is sent by email.

=====================================================
DB
mysql> describe ocr ;
+-------------------+--------------+------+-----+---------+----------------+
| Field             | Type         | Null | Key | Default | Extra          |
+-------------------+--------------+------+-----+---------+----------------+
| idocr             | int(11)      | NO   | PRI | NULL    | auto_increment |
| imageFile         | varchar(200) | NO   | MUL | NULL    |                |
| ocrEngine         | varchar(45)  | NO   |     | NULL    |                |
| langParam         | varchar(8)   | NO   |     | NULL    |                |
| brightness        | int(11)      | NO   |     | NULL    |                |
| contrast          | int(11)      | NO   |     | NULL    |                |
| avgWordConfidence | int(11)      | YES  |     | NULL    |                |
| numWords          | int(11)      | YES  |     | NULL    |                |
| startOcr          | datetime     | YES  |     | NULL    |                |
| timeOcr           | int(11)      | YES  |     | NULL    |                |
| remarks           | varchar(45)  | YES  |     | NULL    |                |
| imageFileSize     | int(11)      | YES  |     | NULL    |                |
| outputText        | text         | YES  |     | NULL    |                |
| outputHocr        | blob         | YES  |     | NULL    |                |
+-------------------+--------------+------+-----+---------+----------------+

imageFile
   Contains file paths in the form of path/to/image/dir/0223.jpg

ocrEngine
   Currently, this field is always 'tess3.03-IMdivide'.

langParam
   Tesseract supposedly will work better if it is told by parameter which language
   it should expect, so it can make use of dictionaries. However, the results for
   us are the same whether it is given 'eng' or 'fra'. Ideally we would like Tesseract
   to tell us which language(s) it found, but we would do better to post-process
   the results, and count hits against French and English dictionaries.
   Currently, this field is always 'eng'.

brightness, contrast
   These fields are currently meaningless.

avgWordConfidence
   This field records the average X_xconf value from the .hocr file.

numWords
   This field records the number of words from the .hocr file

startOcr, time Ocr
   The start time and elapsed time.

remarks
   This field is unused.

imageFileSize
   The size in bytes of the input image.
outputText
   The resulting text from Tesseract, in UTF8

outputHocr
   The resulting hOCR from Tesseract, compressed by gzip.

=====================================================
Project:
   Github soon, and CPAN

Contributing: 
   pull the project, and discuss ..
   
Discussion now:
   https://groups.google.com/forum/#!forum/tesseract-ocr
Discussion future:
   Github forum

License: 
   Perl Artistic http://dev.perl.org/licenses/artistic.html

To Do:
  -add your plans to this To Do list, or elaborate on it
  -the server should be launched using a service, in the scope of a ocr-data user account.

  -Installation of the master needs to be automated, beyond what is done by installWorker.sh:
   There needs to be a directory /var/run/ocr which is writeable by the user running this cat app.
  
  -pluggable OCR engine and image preprocessing
  -bundle the CPAN modules for automated installation

  -One idea is to run a spelling checker across everything. It will correct some stuff, but 
   it will also make mistakes like changing a name to a word. So we can keep both
   the original and the corrected word in the full text, and searches will work better.
   See languagetool.org

  -Also, when a word ends in a hyphen, we can join the following word and add that. 
   Especially when we have solved the column problems.

  -We talked of multi-column, like newspapers. OCR should follow the column. In
   the pathological case, OCR spans across the page, getting the column text interleaved. 
   We could solve this by using Ocropus to find bounding boxes, then Tesseract to do the actual work.

  -We talked of improvements in Adaptive thresholding. There is OpenCV, and the ImageMagick -lat feature

  -In some Arabic community there is ongoing work to modify Tesseract to recognize connected 
   characters because Arabic is generally connected. Their algorithm is called Cube or similar, 
   and runs much slower, with uncertain results. I mention this because we could possibly do
   something with our cursive images (though only the cleanest copperplate grade).

Contributors
  richard.leir@canadiana.ca
  russell@ (withheld)
  tim@ (withheld)

==========================

